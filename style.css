* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
  font-family: "Trebuchet MS", "Lucida Sans Unicode", "Lucida Grande", "Lucida Sans",
    Arial, sans-serif;
  font-weight: bolder;

  color: rgb(63, 136, 155);
}
/* 1 vh unit corresponds to 1% of the viewPort height */
body {
  /* background-color: #f1b58d; */
  background: linear-gradient(45deg, #e6884e, #b1c95b, #67b477, #d3dd46);
  background-size: 400% 400%;
  animation: Gradient 15s ease infinite;
  height: 100vh;
  display: flex;
  flex-direction: column;
}
h1 {
  padding: 1rem;
}
.s1 {
  color: rgb(38, 123, 134);
}

@keyframes Gradient {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

.settings-div {
  width: 100%;
}

#container {
  max-width: 600px;
  margin: auto;
}
#infoDiv {
  margin: 0 auto;
  text-align: center;
  background-image: url(images/front_face.png);
  background-repeat: no-repeat;
  background-size: 20%;
  animation: Gradient 10s ease infinite;
}
#container-game {
  margin: auto;
  min-height: 50vh;
  /* width: 700px;
  height: 100vh;
  max-height: 540px; */
  display: flex;
  flex-wrap: wrap;
  padding: 10px;
  background-color: rgb(255, 205, 176);
  border: 4px solid rgb(255, 187, 148);
  border-radius: 30px;
  /* adding 3d effect: perspective in container and transform style to element */
  perspective: 1000px;
}

.card-component {
  width: calc(25% - 10px);
  height: auto;
  margin: 5px;
  position: relative;
  transition: 50ms linear;
  /* transform */
  transform-style: preserve-3d;
  transition: transform 0.2s;
}
.card-component:hover {
  cursor: pointer;
}

.card-component:active {
  transform: scale(0.97);
  transition: 50ms linear;
}
/* theres no space between class names  */
/* cause the 2 classes belong to the same element, need to read more about it */
.card-component.toggle-flip {
  transform: rotateY(180deg);
  /* transform: scale(0.2); */
}

.back-face:hover {
  background-color: rgb(230, 89, 89);
  border-bottom: 5px solid rgb(184, 73, 97);
  transition: 150ms linear;
  animation: swing 0.15s ease;
}

.front-face,
.back-face {
  width: 100%;
  height: auto;
  padding: 15%;
  border-radius: 30px;
  border-bottom: 5px solid rgb(73, 161, 184);
  background-color: rgb(98, 164, 238);
  /* position: absolute; */
  transition: 50ms linear;
  /* every html element has a backface(mirrored image of itself?) set to visible.
  It needs to be hidden ? it still works when i remove it, hmm */
  backface-visibility: hidden;
}

.front-face {
  padding: 25%;
  background: linear-gradient(
    45deg,
    rgb(255, 169, 129),
    rgb(238, 185, 106),
    rgb(255, 221, 126)
  );
  border-bottom: none;
  border-top: 5px solid rgb(255, 186, 122);
  border-right: 5px solid rgb(255, 186, 122);
  transform: rotateY(180deg);
  position: absolute;
}

#diffBoard {
  display: flex;
  justify-content: center;
  margin: 0 auto;
  margin-bottom: 10px;
  margin-top: 20px;
  width: 80%;
}

#scoreBoard {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}
#startDiv,
#easyDiv,
#hardDiv,
#scoreDiv,
#scoreTime {
  margin: 5px;

  display: inline-block;
  max-width: 150px;
  width: 45%;
  height: 40px;
  padding: 8px 0;
  text-align: center;
  background-color: rgb(255, 205, 176);
  border: 4px solid rgb(255, 187, 148);
  border-radius: 20px;
}
#easyDiv,
#hardDiv {
  font-size: 1.7rem;
  padding: 0;
  width: 50px;
}

#resetButton {
  margin: 20px auto;
  display: block;
  width: 50%;
  height: 35px;
  background-color: rgb(255, 195, 173);
  border: 2px solid rgb(255, 206, 188);
  border-radius: 20px;
}
#easyDiv:active,
#hardDiv:active,
#resetButton:active {
  transform: scale(0.95);
  transition: 50ms linear;
}
#startDiv:hover,
#easyDiv:hover,
#hardDiv:hover,
#resetButton:hover {
  background-color: rgb(230, 89, 89);

  transition: 100ms linear;

  color: rgb(255, 206, 188);
}

@keyframes rotation {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
}

@keyframes swing {
  15% {
    transform: translateX(5px);
  }
  30% {
    transform: translateX(-5px);
  }
  50% {
    transform: translateX(3px);
  }
  65% {
    transform: translateX(-3px);
  }
  80% {
    transform: translateY(2px);
  }
  100% {
    transform: translateX(0);
  }
}
